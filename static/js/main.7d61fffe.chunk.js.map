{"version":3,"sources":["components/grid/NodeStates.js","algorithms/shared.js","components/grid/BoardNode.js","data_structures/PriorityQueue.js","algorithms/greedy.js","components/grid/PathFinderBoard.js","App.js","index.js"],"names":["NodeStates","start","end","visited","unvisited","wall","path","isValid","x","y","grid","length","has","nodeState","getNeighborIncrements","isDiagonalNeighbors","neighbors","i","j","push","sort","a","b","getPath","lastNode","prev","reverse","BoardNode","this","weight","setState","bind","click","mouseOver","event","draggedState","revertPreviousNode","setThisAsPrevious","walls","add","getKey","delete","startNode","endNode","which","button","preventDefault","state","undefined","NodeDOM","className","Set","PriorityQueue","ids","values","id","value","pos","parent","parentValue","top","halfLength","left","right","bestIndex","bestValue","rightValue","greedy","queue","visitedOrder","cost","current","pop","increments","neighbor","Math","abs","distanceFromEnd","sqrt","key","PathFinderBoard","window","addEventListener","width","height","Array","row","middleRow","startCol","endCol","createBoardNodeGrid","currentGrid","useRef","isVisualized","isAnimating","visitedNodes","visualize","cleanUpVisitedNodes","takenPath","index","interval","setInterval","clearInterval","visualizePath","node","Promise","resolve","pathInterval","useEffect","currentNode","document","getElementById","Fragment","type","onClick","title","onContextMenu","e","map","onMouseDown","onMouseOver","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7d61fffe.chunk.js","sourcesContent":["export const NodeStates = {\r\n  start: 'start',\r\n  end: 'end',\r\n  visited: 'visited',\r\n  unvisited: 'unvisited',\r\n  wall: 'wall',\r\n  path: 'path',\r\n};\r\n","import { NodeStates } from '../components/grid/NodeStates';\r\n\r\nexport const isValid = (x, y, grid, visited) => {\r\n  return (\r\n    x >= 0 &&\r\n    x < grid[0].length &&\r\n    y >= 0 &&\r\n    y < grid.length &&\r\n    !visited.has(`${y}_${x}`) &&\r\n    grid[y][x].nodeState !== NodeStates.wall\r\n  );\r\n};\r\n\r\nexport const getNeighborIncrements = (isDiagonalNeighbors) => {\r\n  let neighbors = [];\r\n  for (let i = -1; i <= 1; i++) {\r\n    for (let j = -1; j <= 1; j++) {\r\n      // if diagonal neighbors are not allowed and the current is diagonal, skip\r\n      if (!isDiagonalNeighbors && i !== 0 && j !== 0) continue;\r\n\r\n      // you can't be your own neighbor\r\n      if (i === 0 && j === 0) continue;\r\n\r\n      neighbors.push({ x: j, y: i });\r\n    }\r\n  }\r\n  if (isDiagonalNeighbors)\r\n    neighbors.sort((a, b) => {\r\n      if ((a.x === 0 || a.y === 0) && (b.x === 0 || b.y === 0)) {\r\n        return 0;\r\n      }\r\n      if (a.x === 0 || a.y === 0) return -1;\r\n      if (b.x === 0 || b.y === 0) return 1;\r\n    });\r\n  return neighbors;\r\n};\r\n\r\nexport const getPath = (lastNode) => {\r\n  let path = [];\r\n  while ('prev' in lastNode) {\r\n    path.push({ x: lastNode.x, y: lastNode.y });\r\n    lastNode = lastNode.prev;\r\n  }\r\n  return path.reverse();\r\n};\r\n\r\nexport const isDiagonal = (node1, node2) => {\r\n  return node1.x !== node2.x && node1.y !== node2.y;\r\n};\r\n","import { NodeStates } from './NodeStates';\r\n\r\nexport class BoardNode {\r\n  static startNode = null;\r\n  static endNode = null;\r\n  static draggedState = null;\r\n  static revertPreviousNode = null;\r\n  static walls = new Set();\r\n  constructor(x, y) {\r\n    this.weight = 1;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.nodeState = NodeStates.unvisited;\r\n    this.setState = this.setState.bind(this);\r\n    this.click = this.click.bind(this);\r\n    this.mouseOver = this.mouseOver.bind(this);\r\n  }\r\n  mouseOver(event) {\r\n    if (\r\n      BoardNode.draggedState === null ||\r\n      this.nodeState === NodeStates.start ||\r\n      this.nodeState === NodeStates.end\r\n    )\r\n      return;\r\n\r\n    if (\r\n      BoardNode.draggedState === NodeStates.unvisited &&\r\n      (this.nodeState === NodeStates.path ||\r\n        this.nodeState === NodeStates.visited)\r\n    )\r\n      return;\r\n\r\n    if (\r\n      BoardNode.draggedState !== NodeStates.wall &&\r\n      BoardNode.revertPreviousNode !== null\r\n    ) {\r\n      BoardNode.revertPreviousNode();\r\n      this.setThisAsPrevious();\r\n    }\r\n    this.setState(BoardNode.draggedState);\r\n    if (BoardNode.draggedState === NodeStates.wall) {\r\n      BoardNode.walls.add(this.getKey());\r\n    } else if (BoardNode.draggedState === NodeStates.unvisited) {\r\n      BoardNode.walls.delete(this.getKey());\r\n    } else if (BoardNode.draggedState === NodeStates.start) {\r\n      BoardNode.startNode = this;\r\n    } else if (BoardNode.draggedState === NodeStates.end) {\r\n      BoardNode.endNode = this;\r\n    }\r\n  }\r\n  getKey() {\r\n    return `${this.y}_${this.x}`;\r\n  }\r\n  // e.button === 0: the left button is clicked\r\n  // e.button === 1: the middle button is clicked\r\n  // e.button === 2: the right button is clicked\r\n  // e.button === 3: the `Browser Back` button is clicked\r\n  // e.button === 4: the `Browser Forward` button is clicked\r\n  click(event) {\r\n    const which = event.button;\r\n    event.preventDefault();\r\n    if (which === 0) {\r\n      BoardNode.draggedState = this.nodeState;\r\n      if (\r\n        this.nodeState === NodeStates.path ||\r\n        this.nodeState === NodeStates.visited\r\n      ) {\r\n        BoardNode.draggedState = NodeStates.wall;\r\n      } else if (this.nodeState === NodeStates.unvisited) {\r\n        BoardNode.draggedState = NodeStates.wall;\r\n        this.setState(NodeStates.wall);\r\n        BoardNode.walls.add(this.getKey());\r\n      } else {\r\n        this.setThisAsPrevious(NodeStates.unvisited);\r\n      }\r\n    } else if (which === 2) {\r\n      BoardNode.draggedState = NodeStates.unvisited;\r\n      if (this.nodeState === NodeStates.wall) {\r\n        this.setState(NodeStates.unvisited);\r\n        BoardNode.walls.delete(this.getKey());\r\n      }\r\n    }\r\n  }\r\n  setThisAsPrevious(state = this.nodeState) {\r\n    BoardNode.revertPreviousNode = this.setState.bind(this, state);\r\n  }\r\n  setState(state) {\r\n    if (state === undefined) state = NodeStates.unvisited;\r\n    //why bug?\r\n\r\n    //if (state === this.state) return;\r\n    this.NodeDOM.className = 'node ' + NodeStates[state];\r\n    this.nodeState = state;\r\n  }\r\n}\r\n","/*\r\nISC License\r\n\r\nCopyright (c) 2021, Vladimir Agafonkin\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any purpose\r\nwith or without fee is hereby granted, provided that the above copyright notice\r\nand this permission notice appear in all copies.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\r\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\r\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\r\nTHIS SOFTWARE.\r\n*/\r\n\r\nexport default class PriorityQueue {\r\n  constructor() {\r\n    this.ids = [];\r\n    this.values = [];\r\n    this.length = 0;\r\n  }\r\n\r\n  clear() {\r\n    this.length = 0;\r\n  }\r\n\r\n  push(id, value) {\r\n    let pos = this.length++;\r\n    this.ids[pos] = id;\r\n    this.values[pos] = value;\r\n\r\n    while (pos > 0) {\r\n      const parent = (pos - 1) >> 1;\r\n      const parentValue = this.values[parent];\r\n      if (value >= parentValue) break;\r\n      this.ids[pos] = this.ids[parent];\r\n      this.values[pos] = parentValue;\r\n      pos = parent;\r\n    }\r\n\r\n    this.ids[pos] = id;\r\n    this.values[pos] = value;\r\n  }\r\n\r\n  pop() {\r\n    if (this.length === 0) return undefined;\r\n\r\n    const top = this.ids[0];\r\n    this.length--;\r\n\r\n    if (this.length > 0) {\r\n      const id = (this.ids[0] = this.ids[this.length]);\r\n      const value = (this.values[0] = this.values[this.length]);\r\n      const halfLength = this.length >> 1;\r\n      let pos = 0;\r\n\r\n      while (pos < halfLength) {\r\n        let left = (pos << 1) + 1;\r\n        const right = left + 1;\r\n        let bestIndex = this.ids[left];\r\n        let bestValue = this.values[left];\r\n        const rightValue = this.values[right];\r\n\r\n        if (right < this.length && rightValue < bestValue) {\r\n          left = right;\r\n          bestIndex = this.ids[right];\r\n          bestValue = rightValue;\r\n        }\r\n        if (bestValue >= value) break;\r\n\r\n        this.ids[pos] = bestIndex;\r\n        this.values[pos] = bestValue;\r\n        pos = left;\r\n      }\r\n\r\n      this.ids[pos] = id;\r\n      this.values[pos] = value;\r\n    }\r\n\r\n    return top;\r\n  }\r\n\r\n  peek() {\r\n    if (this.length === 0) return undefined;\r\n    return this.ids[0];\r\n  }\r\n\r\n  peekValue() {\r\n    if (this.length === 0) return undefined;\r\n    return this.values[0];\r\n  }\r\n\r\n  shrink() {\r\n    this.ids.length = this.values.length = this.length;\r\n  }\r\n}\r\n","import { isDiagonal, getPath, isValid, getNeighborIncrements } from './shared';\r\nimport PriorityQueue from '../data_structures/PriorityQueue';\r\n\r\nexport const greedy = (start, end, grid, isDiagonalNeighbors) => {\r\n  const neighbors = getNeighborIncrements(isDiagonalNeighbors);\r\n  const queue = new PriorityQueue();\r\n  const visitedOrder = [];\r\n  const visited = new Set();\r\n  start.cost = 0;\r\n  queue.push(start, 0);\r\n  visited.add(`${start.y}_${start.x}`);\r\n\r\n  while (!(queue.length === 0)) {\r\n    const current = queue.pop();\r\n    if (current.x === end.x && current.y === end.y) {\r\n      let path = getPath(current);\r\n      return [visitedOrder, path];\r\n    }\r\n    visitedOrder.push(current);\r\n\r\n    for (let increments of neighbors) {\r\n      const neighbor = {\r\n        x: current.x + increments.x,\r\n        y: current.y + increments.y,\r\n      };\r\n      if (isValid(neighbor.x, neighbor.y, grid, visited)) {\r\n        neighbor.prev = current;\r\n\r\n        const x = Math.abs(neighbor.x - end.x);\r\n        const y = Math.abs(neighbor.y - end.y);\r\n\r\n        const distanceFromEnd = Math.sqrt(x * x + y * y);\r\n        const key = `${neighbor.y}_${neighbor.x}`;\r\n\r\n        queue.push(neighbor, distanceFromEnd);\r\n        visited.add(key);\r\n      }\r\n    }\r\n  }\r\n  return [visitedOrder, []];\r\n};\r\n","import './PathFinderBoard.css';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { dfs } from '../../algorithms/dfs';\r\nimport { bfs } from '../../algorithms/bfs';\r\nimport { NodeStates } from './NodeStates';\r\nimport { BoardNode } from './BoardNode';\r\nimport { djikstra } from '../../algorithms/dijkstra';\r\nimport { astar } from '../../algorithms/astar';\r\nimport { greedy } from '../../algorithms/greedy';\r\n\r\nconst PathFinderBoard = () => {\r\n  const createBoardNodeGrid = (width, height) => {\r\n    let grid = new Array(height);\r\n    for (let i = 0; i < height; i++) {\r\n      let row = new Array(width);\r\n      for (let j = 0; j < width; j++) {\r\n        row[j] = new BoardNode(j, i);\r\n      }\r\n      grid[i] = row;\r\n    }\r\n    const middleRow = ~~(height / 2);\r\n    const startCol = ~~(width / 4);\r\n    const endCol = width - ~~(width / 4);\r\n    grid[middleRow][startCol].nodeState = NodeStates.start;\r\n    grid[middleRow][endCol].nodeState = NodeStates.end;\r\n    BoardNode.startNode = grid[middleRow][startCol];\r\n    BoardNode.endNode = grid[middleRow][endCol];\r\n\r\n    return grid;\r\n  };\r\n\r\n  window.addEventListener('mouseup', () => {\r\n    BoardNode.draggedState = null;\r\n    BoardNode.revertPreviousNode = null;\r\n  });\r\n  const width = 60;\r\n  const height = 30;\r\n\r\n  const grid = createBoardNodeGrid(width, height);\r\n\r\n  const currentGrid = useRef(grid);\r\n  const isVisualized = useRef(false);\r\n  const isAnimating = useRef(false);\r\n  const visitedNodes = useRef([]);\r\n\r\n  const visualize = async function () {\r\n    if (isAnimating.current) return;\r\n    if (isVisualized.current) cleanUpVisitedNodes(visitedNodes.current);\r\n    isVisualized.current = true;\r\n    isAnimating.current = true;\r\n    const start = { x: BoardNode.startNode.x, y: BoardNode.startNode.y };\r\n    const end = { x: BoardNode.endNode.x, y: BoardNode.endNode.y };\r\n    const [visitedOrder, takenPath] = greedy(\r\n      start,\r\n      end,\r\n      currentGrid.current,\r\n      true\r\n    );\r\n    visitedNodes.current = visitedOrder;\r\n    if (visitedOrder.length === 0) return;\r\n\r\n    let index = 0;\r\n    const interval = setInterval(async () => {\r\n      const x = visitedOrder[index].x;\r\n      const y = visitedOrder[index].y;\r\n      index++;\r\n      const nodeState = currentGrid.current[y][x].nodeState;\r\n      if (nodeState !== NodeStates.end && nodeState !== NodeStates.start)\r\n        currentGrid.current[y][x].setState(NodeStates.visited);\r\n      if (index === visitedOrder.length) {\r\n        clearInterval(interval);\r\n        await visualizePath(takenPath);\r\n        isAnimating.current = false;\r\n      }\r\n    }, 0.5);\r\n  };\r\n\r\n  const cleanUpVisitedNodes = (visitedNodes) => {\r\n    for (let node of visitedNodes) {\r\n      const x = node.x;\r\n      const y = node.y;\r\n      const nodeState = currentGrid.current[y][x].nodeState;\r\n      if (nodeState === NodeStates.path || nodeState === NodeStates.visited)\r\n        currentGrid.current[node.y][node.x].setState(NodeStates.unvisited);\r\n    }\r\n  };\r\n\r\n  const visualizePath = function (takenPath) {\r\n    return new Promise((resolve) => {\r\n      if (takenPath.length === 0) {\r\n        resolve();\r\n        return;\r\n      }\r\n      let index = 0;\r\n      const pathInterval = setInterval(() => {\r\n        const x = takenPath[index].x;\r\n        const y = takenPath[index].y;\r\n        index++;\r\n        const nodeState = currentGrid.current[y][x].nodeState;\r\n        if (nodeState !== NodeStates.end && nodeState !== NodeStates.start)\r\n          currentGrid.current[y][x].setState(NodeStates.path);\r\n        if (index === takenPath.length) {\r\n          clearInterval(pathInterval);\r\n          resolve();\r\n        }\r\n      }, 20);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    for (let i = 0; i < height; i++) {\r\n      for (let j = 0; j < width; j++) {\r\n        const currentNode = currentGrid.current[i][j];\r\n        currentNode.NodeDOM = document.getElementById(\r\n          `${currentNode.y}_${currentNode.x}`\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <button type=\"button\" onClick={visualize} title=\"Visualize\">\r\n        Visualize!\r\n      </button>\r\n      <table className=\"board\">\r\n        <tbody onContextMenu={(e) => e.preventDefault()}>\r\n          {currentGrid.current.map((row) => (\r\n            <tr className=\"row\">\r\n              {row.map((node) => (\r\n                <td\r\n                  className={'node ' + node.nodeState}\r\n                  id={`${node.y}_${node.x}`}\r\n                  onMouseDown={node.click}\r\n                  onMouseOver={node.mouseOver}\r\n                ></td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PathFinderBoard;\r\n","import PathFinderBoard from './components/grid/PathFinderBoard';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <PathFinderBoard />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}